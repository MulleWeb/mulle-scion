#! /usr/bin/env mulle-bash
#
#  run-test.sh
#  MulleObjC
#
#  Created by Nat! on 01.11.13.
#  Copyright (c) 2013 Mulle kybernetiK. All rights reserved.
#  (was run-mulle-scion-test)

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=1.0.0


search_plist()
{
   local plist
   local root

   r_dirname "$1"
   dir="${RVAL}"
   r_basename "$1"
   plist="${RVAL}"

   root="$2"

   while :
   do
      if [ -f "$dir"/"$plist" ]
      then
         echo "$dir/$plist"
         break
      fi

      if [ "$dir" = "$root" ]
      then
         break
      fi

      r_dirname "${dir}"
      next="${RVAL}"
      if [ "$next" = "$dir" ]
      then
         break
      fi
      dir="$next"
   done
}


run()
{
   local template
   local plist
   local stdin
   local stdout
   local stderr
   local output
   local errput
   local random
   local fail
   local match

   template="$1"
   plist="$2"
   stdin="$3"
   stdout="$4"
   stderr="$5"

   random=`mktemp -t "mulle-scion-XXXX"`
   output="$random.stdout"
   errput="$random.stderr"
   errors=`basename $template .scion`.errors

   pwd=`pwd`
   pretty_template="$pwd/$template"
   pretty_template="${pretty_template#${root}/}"

   if [ "${MULLE_FLAG_LOG_VERBOSE}" = "YES" ]
   then
      echo "$pretty_template" >&2
   fi

   RUNS=`expr $RUNS + 1`

   # plz2shutthefuckup bash
   set +m
   set +b
   set +v
   # denied, will always print TRACE/BPT

   # valgrind -q --error-exitcode=77 --num-callers=500 --track-origins=yes \
   exekutor $MULLE_SCION "$template" "$plist" < "$stdin" > "$output" 2> "$errput"

   if [ $? -ne 0 ]
   then
      if [ ! -f "$errors" ]
      then
         echo "TEMPLATE CRASHED: \"$pretty_template\"" >& 2
         echo "DIAGNOSTICS:" >& 2
         cat  "$errput"
         return 1
      else
         fail=0
         while read expect
         do
            match=`grep "$expect" "$errput"`
            if [ "$match" = "" ]
            then
               if [ $fail -eq 0 ]
               then
                  echo "TEMPLATE FAILED TO PRODUCE ERRORS: \"$pretty_template\"" >& 2
                  fail=1
               fi
               echo "   $expect" >&2
            fi
         done < "$errors"
         if [ $fail -eq 1 ]
         then
            return 1
         fi
         rm "$output" "$errput" 2> /dev/null
         return 0
      fi
   else
      if [ -f "$errors" ]
      then
         echo "TEMPLATE FAILED TO CRASH: \"$pretty_template\"" >& 2
         echo "DIAGNOSTICS:" >&2
         cat  "$errput"
         return 1
      fi
   fi


   if [ "$stdout" != "-" ]
   then
      result=`diff -q "$output" "$stdout"`
      if [ "$result" != "" ]
      then
         white=`diff -q -w "$output" "$stdout"`
         if [ "$white" != "" ]
         then
            echo "FAILED: \"$pretty_template\" produced unexpected output" >& 2
            echo "DIFF: ($output vs. $stdout)" >& 2
            diff -y "$output" "$stdout" >& 2
         else
            echo "FAILED: \"$pretty_template\" produced different whitespace output" >& 2
            echo "DIFF: ($output vs. $stdout)" >& 2
            od -a "$output" > "$output".actual.hex
            od -a "$stdout" > "$output".expect.hex
            diff -y "$output".actual.hex "$output".expect.hex >& 2
         fi

         echo "DIAGNOSTICS:" >& 2
         cat  "$errput"
         return 2
      fi
   fi

   if [ "$stderr" != "-" ]
   then
      result=`diff "$stderr" "$errput"`
      if [ "$result" != "" ]
      then
         echo "WARNING: \"$pretty_template\" produced unexpected diagnostics ($errput)" >& 2
         echo "" >& 2
         diff "$errput" "$stderr" >& 2
         echo "DIAGNOSTICS:" >& 2
         cat  "$errput"
         return 3
      fi
   fi
   rm "$output" "$errput" 2> /dev/null

   return 0
}


run_test()
{
   local stdin
   local stdout
   local stderr
   local template
   local plist
   local root

   template="$1.scion"
   plist="$1.plist"
   root="$2"

   if [ ! -f "$plist" ]
   then
      start=`pwd`/default.plist
      plist=`search_plist "$start" "$root"`
      if [ "$plist" = "" ]
      then
         plist="none"
         if [ "$HAVE_WARNED" != "YES" ]
         then
            log_warning "warning: no default.plist found"
            HAVE_WARNED="YES"
         fi
      fi
   fi

   stdin="$1.stdin"
   if [ ! -f "$stdin" ]
   then
      stdin="provide/$1.stdin"
   fi
   if [ ! -f "$stdin" ]
   then
      stdin="default.stdin"
   fi
   if [ ! -f "$stdin" ]
   then
      stdin="/dev/null"
   fi

   stdout="$1.stdout"
   if [ ! -f "$stdout" ]
   then
      stdout="expect/$1.stdout"
   fi
   if [ ! -f "$stdout" ]
   then
      stdout="default.stdout"
   fi
   if [ ! -f "$stdout" ]
   then
      stdout="-"
   fi

   stderr="$1.stderr"
   if [ ! -f "$stderr" ]
   then
      stderr="expect/$1.stderr"
   fi
   if [ ! -f "$stderr" ]
   then
      stderr="default.stderr"
   fi
   if [ ! -f "$stderr" ]
   then
      stderr="-"
   fi

   local rc

   run "$template" "$plist" "$stdin" "$stdout" "$stderr"
   rc="$?"

   if [ $rc -eq 0 ]
   then
      return
   fi

   if [ "${STRICT}" = 'YES' ]
   then
      exit $rc
   fi

   FAILS=$(( FAILS + 1))
}


scan_directory()
{
   local i
   local filename
   local root
   local dir
   local pattern

   root="$1"
   pattern="$2"

   if [ -z "${pattern}" ]
   then
      pattern='[^_]*'
   fi

   for i in $pattern
   do
      if [ -d "$i" ]
      then
         old="${PWD}" # keep RUNS alive so no subshell
         cd "$i" && scan_directory "$root"
         cd "${old}"
      else
         filename=`basename "$i" .scion`
         if [ "$filename" != "$i" ]
         then
            run_test "$filename" "$root"
         fi
      fi
   done
}


test_binary()
{
   local random
   local output
   local errput

   random=`mktemp -t "mulle-scion-XXXX"`
   output="$random.stdout"
   errput="$random.stderr"

   rexekutor "${MULLE_SCION}" > /dev/null 2>&1
   code=$?

   if [ $code -eq 127 ]
   then
      fail "${MULLE_SCION} can not be run (missing shared library probably ($PWD, $PATH)"
   fi

   if [ $code -eq 111 ]
   then
      fail "${MULLE_SCION} universe is broken (check tmp ?)"
   fi


   log_verbose "using ${MULLE_SCION} to test" >&2
}


absolute_path_if_relative()
{
   case "$1" in
      .*)  echo `pwd`/"$1"
	   ;;

      *)   echo "$1"
	   ;;
   esac
}


trace_ignore()
{
   return 0
}


main()
{
   trap trace_ignore 5 6

   DIR=`pwd -P`
   HAVE_WARNED="NO"
   RUNS=0
   FAILS=0
   STRICT='YES'

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            test::usage "${MULLE_TRACE}"
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         --lenient)
            STRICT='NO'
         ;;

         --path-prefix|--serial|--no-parallel|--rerun)
            shift # ignore argument
         ;;

         -*)
            fail "unknown option \"$1\"" >&2
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   TEST="$1"

   #
   # get DEPENDENCY_DIR and friends
   #
   eval `mulle-sde tool-env` || exit 1

   log_setting "ADDICTION_DIR=\"${ADDICTION_DIR}\""
   log_setting "CRAFTORDER_KITCHEN_DIR=\"${CRAFTORDER_KITCHEN_DIR}\""
   log_setting "DEPENDENCY_DIR=\"${DEPENDENCY_DIR}\""
   log_setting "KITCHEN_DIR=\"${KITCHEN_DIR}\""
   log_setting "PATH=\"${PATH}\""
   log_setting "MULLE_SOURCETREE_PROJECT_DIR=\"${MULLE_SOURCETREE_PROJECT_DIR}\""
   log_setting "MULLE_SOURCETREE_STASH_DIR=\"${MULLE_SOURCETREE_STASH_DIR}\""

   #
   # find executable
   #
   MULLE_SCION="`which mulle-scion`"

   if [ -z "${MULLE_SCION}" ]
   then
      echo "mulle-scion can not be found (Tip: start with \`mulle-sde test\`) PATH=\"${PATH}\" ($PWD)" >&2
      ls -lR "${DEPENDENCY_DIR:-dependency}" >&2
      exit 1
   fi

   MULLE_SCION=`absolute_path_if_relative "${MULLE_SCION}"`

   if [ ! -z "${DEPENDENCY_DIR}" ]
   then
      case "`uname`" in
         Darwin)
            DYLD_FALLBACK_FRAMEWORK_PATH="${DEPENDENCY_DIR}/Frameworks"
            export DYLD_FALLBACK_FRAMEWORK_PATH
            log_verbose "DYLD_FALLBACK_FRAMEWORK_PATH='${DEPENDENCY_DIR}/Frameworks'"
         ;;

         *)
            LD_LIBRARY_PATH="${DEPENDENCY_DIR}/lib:${LD_LIBRARY_PATH}"
            export LD_LIBRARY_PATH
            log_verbose "LD_LIBRARY_PATH='${DEPENDENCY_DIR}/lib:${LD_LIBRARY_PATH}'"
         ;;
      esac
   fi

   test_binary "$MULLE_SCION"

   if [ -z "$TEST" ]
   then
      scan_directory "$DIR" "[0-9][0-9]*"

      if [ $RUNS -ne 0 ]
      then
         if [ $FAILS -eq 0 ]
         then
            echo "All $RUNS tests passed successfully"
         else
            echo "$FAILS tests out of $RUNS failed"
            exit 1
         fi
      else
         fail "no tests found"
      fi
   else
       local directory

       r_dirname "${TEST}"
       directory="${RVAL}"
       if [ "${directory}" = "" ]
       then
          directory="."
       fi

       r_basename "${TEST}"
       file="${RVAL}"

       filename=`basename "$file" .scion`

       if [ "$file" = "$filename" ]
       then
          fail "template file must have .scion extension"
          exit 1
       fi

       if [ ! -f "$TEST" ]
       then
          fail "error: template file not found"
          exit 1
       fi

       (
          cd "${directory}" && run_test "$filename" "${directory}"
       )
       return $?
   fi
}

set -m

main "$@"
