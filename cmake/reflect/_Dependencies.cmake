# This file will be regenerated by `mulle-sourcetree-to-cmake` via
# `mulle-sde reflect` and any edits will be lost.
#
# This file will be included by cmake/share/Files.cmake
#
# Disable generation of this file with:
#
# mulle-sde environment set MULLE_SOURCETREE_TO_CMAKE_DEPENDENCIES_FILE DISABLE
#
if( MULLE_TRACE_INCLUDE)
   message( STATUS "# Include \"${CMAKE_CURRENT_LIST_FILE}\"" )
endif()

#
# Generated from sourcetree: 5C7B0A16-98BA-4D02-90ED-FAD925D8C216;Foundation;no-singlephase;
# Disable with : `mulle-sourcetree mark Foundation no-link`
# Disable for this platform: `mulle-sourcetree mark Foundation no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark Foundation no-cmake-sdk-<name>`
#
if( NOT FOUNDATION_LIBRARY)
   if( DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
      find_library( FOUNDATION_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation${CMAKE_STATIC_LIBRARY_SUFFIX}
         Foundation
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
   else()
      find_library( FOUNDATION_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation${CMAKE_STATIC_LIBRARY_SUFFIX}
         Foundation
      )
   endif()
   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
   #
   # The order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need.
   #
   if( FOUNDATION_LIBRARY)
      #
      # Add FOUNDATION_LIBRARY to ALL_LOAD_DEPENDENCY_LIBRARIES list.
      # Disable with: `mulle-sourcetree mark Foundation no-cmake-add`
      #
      list( APPEND ALL_LOAD_DEPENDENCY_LIBRARIES ${FOUNDATION_LIBRARY})
      #
      # Inherit information from dependency.
      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
      # Disable with: `mulle-sourcetree mark Foundation no-cmake-inherit`
      #
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_FOUNDATION_ROOT "${FOUNDATION_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_FOUNDATION_ROOT "${_TMP_FOUNDATION_ROOT}" DIRECTORY)
      #
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark Foundation no-cmake-dependency`
      #
      foreach( _TMP_FOUNDATION_NAME "Foundation")
         set( _TMP_FOUNDATION_DIR "${_TMP_FOUNDATION_ROOT}/include/${_TMP_FOUNDATION_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_FOUNDATION_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_FOUNDATION_DIR}")
            #
            include( "${_TMP_FOUNDATION_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_FOUNDATION_DIR}")
            #
            unset( FOUNDATION_DEFINITIONS)
            include( "${_TMP_FOUNDATION_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${FOUNDATION_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_FOUNDATION_DIR} not found")
         endif()
      endforeach()
      #
      # Search for "MulleObjCLoader+<name>.h" in include directory.
      # Disable with: `mulle-sourcetree mark Foundation no-cmake-loader`
      #
      if( NOT NO_INHERIT_OBJC_LOADERS)
         foreach( _TMP_FOUNDATION_NAME "Foundation")
            set( _TMP_FOUNDATION_FILE "${_TMP_FOUNDATION_ROOT}/include/${_TMP_FOUNDATION_NAME}/MulleObjCLoader+${_TMP_FOUNDATION_NAME}.h")
            if( EXISTS "${_TMP_FOUNDATION_FILE}")
               list( APPEND INHERITED_OBJC_LOADERS ${_TMP_FOUNDATION_FILE})
               break()
            endif()
         endforeach()
      endif()
   else()
      # Disable with: `mulle-sourcetree mark Foundation no-require-link`
      message( FATAL_ERROR "FOUNDATION_LIBRARY was not found")
   endif()
endif()


#
# Generated from sourcetree: A7F3F89B-BF3E-4326-994A-DA5BFF120CB7;Foundation-startup;no-dynamic-link,no-header,no-intermediate-link;
# Disable with : `mulle-sourcetree mark Foundation-startup no-link`
# Disable for this platform: `mulle-sourcetree mark Foundation-startup no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark Foundation-startup no-cmake-sdk-<name>`
#
if( NOT FOUNDATION_STARTUP_LIBRARY)
   if( DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
      find_library( FOUNDATION_STARTUP_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation-startup${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation-startup${CMAKE_STATIC_LIBRARY_SUFFIX}
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
   else()
      find_library( FOUNDATION_STARTUP_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation-startup${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}Foundation-startup${CMAKE_STATIC_LIBRARY_SUFFIX}
      )
   endif()
   message( STATUS "FOUNDATION_STARTUP_LIBRARY is ${FOUNDATION_STARTUP_LIBRARY}")
   #
   # The order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need.
   #
   if( FOUNDATION_STARTUP_LIBRARY)
      #
      # Add FOUNDATION_STARTUP_LIBRARY to STARTUP_ALL_LOAD_DEPENDENCY_LIBRARIES list.
      # Disable with: `mulle-sourcetree mark Foundation-startup no-cmake-add`
      #
      list( APPEND STARTUP_ALL_LOAD_DEPENDENCY_LIBRARIES ${FOUNDATION_STARTUP_LIBRARY})
      #
      # Inherit information from dependency.
      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
      # Disable with: `mulle-sourcetree mark Foundation-startup no-cmake-inherit`
      #
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_FOUNDATION_STARTUP_ROOT "${FOUNDATION_STARTUP_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_FOUNDATION_STARTUP_ROOT "${_TMP_FOUNDATION_STARTUP_ROOT}" DIRECTORY)
      #
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark Foundation-startup no-cmake-dependency`
      #
      foreach( _TMP_FOUNDATION_STARTUP_NAME "Foundation-startup")
         set( _TMP_FOUNDATION_STARTUP_DIR "${_TMP_FOUNDATION_STARTUP_ROOT}/include/${_TMP_FOUNDATION_STARTUP_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_FOUNDATION_STARTUP_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_FOUNDATION_STARTUP_DIR}")
            #
            include( "${_TMP_FOUNDATION_STARTUP_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_FOUNDATION_STARTUP_DIR}")
            #
            unset( FOUNDATION_STARTUP_DEFINITIONS)
            include( "${_TMP_FOUNDATION_STARTUP_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${FOUNDATION_STARTUP_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_FOUNDATION_STARTUP_DIR} not found")
         endif()
      endforeach()
      #
      # Search for "MulleObjCLoader+<name>.h" in include directory.
      # Disable with: `mulle-sourcetree mark Foundation-startup no-cmake-loader`
      #
      if( NOT NO_INHERIT_OBJC_LOADERS)
         foreach( _TMP_FOUNDATION_STARTUP_NAME "Foundation-startup")
            set( _TMP_FOUNDATION_STARTUP_FILE "${_TMP_FOUNDATION_STARTUP_ROOT}/include/${_TMP_FOUNDATION_STARTUP_NAME}/MulleObjCLoader+${_TMP_FOUNDATION_STARTUP_NAME}.h")
            if( EXISTS "${_TMP_FOUNDATION_STARTUP_FILE}")
               list( APPEND INHERITED_OBJC_LOADERS ${_TMP_FOUNDATION_STARTUP_FILE})
               break()
            endif()
         endforeach()
      endif()
   else()
      # Disable with: `mulle-sourcetree mark Foundation-startup no-require-link`
      message( FATAL_ERROR "FOUNDATION_STARTUP_LIBRARY was not found")
   endif()
endif()


#
# Generated from sourcetree: 671DBE4D-4DB4-4AE9-AA29-C96136355B21;MulleHoedown;no-singlephase;
# Disable with : `mulle-sourcetree mark MulleHoedown no-link`
# Disable for this platform: `mulle-sourcetree mark MulleHoedown no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark MulleHoedown no-cmake-sdk-<name>`
#
if( NOT MULLE_HOEDOWN_LIBRARY)
   if( DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
      find_library( MULLE_HOEDOWN_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleHoedown${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleHoedown${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleHoedown
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
   else()
      find_library( MULLE_HOEDOWN_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleHoedown${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleHoedown${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleHoedown
      )
   endif()
   message( STATUS "MULLE_HOEDOWN_LIBRARY is ${MULLE_HOEDOWN_LIBRARY}")
   #
   # The order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need.
   #
   if( MULLE_HOEDOWN_LIBRARY)
      #
      # Add MULLE_HOEDOWN_LIBRARY to ALL_LOAD_DEPENDENCY_LIBRARIES list.
      # Disable with: `mulle-sourcetree mark MulleHoedown no-cmake-add`
      #
      list( APPEND ALL_LOAD_DEPENDENCY_LIBRARIES ${MULLE_HOEDOWN_LIBRARY})
      #
      # Inherit information from dependency.
      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
      # Disable with: `mulle-sourcetree mark MulleHoedown no-cmake-inherit`
      #
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_MULLE_HOEDOWN_ROOT "${MULLE_HOEDOWN_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_MULLE_HOEDOWN_ROOT "${_TMP_MULLE_HOEDOWN_ROOT}" DIRECTORY)
      #
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark MulleHoedown no-cmake-dependency`
      #
      foreach( _TMP_MULLE_HOEDOWN_NAME "MulleHoedown")
         set( _TMP_MULLE_HOEDOWN_DIR "${_TMP_MULLE_HOEDOWN_ROOT}/include/${_TMP_MULLE_HOEDOWN_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_MULLE_HOEDOWN_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE_HOEDOWN_DIR}")
            #
            include( "${_TMP_MULLE_HOEDOWN_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE_HOEDOWN_DIR}")
            #
            unset( MULLE_HOEDOWN_DEFINITIONS)
            include( "${_TMP_MULLE_HOEDOWN_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${MULLE_HOEDOWN_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_MULLE_HOEDOWN_DIR} not found")
         endif()
      endforeach()
      #
      # Search for "MulleObjCLoader+<name>.h" in include directory.
      # Disable with: `mulle-sourcetree mark MulleHoedown no-cmake-loader`
      #
      if( NOT NO_INHERIT_OBJC_LOADERS)
         foreach( _TMP_MULLE_HOEDOWN_NAME "MulleHoedown")
            set( _TMP_MULLE_HOEDOWN_FILE "${_TMP_MULLE_HOEDOWN_ROOT}/include/${_TMP_MULLE_HOEDOWN_NAME}/MulleObjCLoader+${_TMP_MULLE_HOEDOWN_NAME}.h")
            if( EXISTS "${_TMP_MULLE_HOEDOWN_FILE}")
               list( APPEND INHERITED_OBJC_LOADERS ${_TMP_MULLE_HOEDOWN_FILE})
               break()
            endif()
         endforeach()
      endif()
   else()
      # Disable with: `mulle-sourcetree mark MulleHoedown no-require-link`
      message( FATAL_ERROR "MULLE_HOEDOWN_LIBRARY was not found")
   endif()
endif()


#
# Generated from sourcetree: D7FD831D-5E53-4BFD-B938-BC6C546A4D62;MulleWebServer;no-singlephase;
# Disable with : `mulle-sourcetree mark MulleWebServer no-link`
# Disable for this platform: `mulle-sourcetree mark MulleWebServer no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark MulleWebServer no-cmake-sdk-<name>`
#
if( NOT MULLE_WEB_SERVER_LIBRARY)
   if( DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
      find_library( MULLE_WEB_SERVER_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleWebServer${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleWebServer${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleWebServer
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
   else()
      find_library( MULLE_WEB_SERVER_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleWebServer${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleWebServer${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleWebServer
      )
   endif()
   message( STATUS "MULLE_WEB_SERVER_LIBRARY is ${MULLE_WEB_SERVER_LIBRARY}")
   #
   # The order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need.
   #
   if( MULLE_WEB_SERVER_LIBRARY)
      #
      # Add MULLE_WEB_SERVER_LIBRARY to ALL_LOAD_DEPENDENCY_LIBRARIES list.
      # Disable with: `mulle-sourcetree mark MulleWebServer no-cmake-add`
      #
      list( APPEND ALL_LOAD_DEPENDENCY_LIBRARIES ${MULLE_WEB_SERVER_LIBRARY})
      #
      # Inherit information from dependency.
      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
      # Disable with: `mulle-sourcetree mark MulleWebServer no-cmake-inherit`
      #
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_MULLE_WEB_SERVER_ROOT "${MULLE_WEB_SERVER_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_MULLE_WEB_SERVER_ROOT "${_TMP_MULLE_WEB_SERVER_ROOT}" DIRECTORY)
      #
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark MulleWebServer no-cmake-dependency`
      #
      foreach( _TMP_MULLE_WEB_SERVER_NAME "MulleWebServer")
         set( _TMP_MULLE_WEB_SERVER_DIR "${_TMP_MULLE_WEB_SERVER_ROOT}/include/${_TMP_MULLE_WEB_SERVER_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_MULLE_WEB_SERVER_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE_WEB_SERVER_DIR}")
            #
            include( "${_TMP_MULLE_WEB_SERVER_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE_WEB_SERVER_DIR}")
            #
            unset( MULLE_WEB_SERVER_DEFINITIONS)
            include( "${_TMP_MULLE_WEB_SERVER_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${MULLE_WEB_SERVER_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_MULLE_WEB_SERVER_DIR} not found")
         endif()
      endforeach()
      #
      # Search for "MulleObjCLoader+<name>.h" in include directory.
      # Disable with: `mulle-sourcetree mark MulleWebServer no-cmake-loader`
      #
      if( NOT NO_INHERIT_OBJC_LOADERS)
         foreach( _TMP_MULLE_WEB_SERVER_NAME "MulleWebServer")
            set( _TMP_MULLE_WEB_SERVER_FILE "${_TMP_MULLE_WEB_SERVER_ROOT}/include/${_TMP_MULLE_WEB_SERVER_NAME}/MulleObjCLoader+${_TMP_MULLE_WEB_SERVER_NAME}.h")
            if( EXISTS "${_TMP_MULLE_WEB_SERVER_FILE}")
               list( APPEND INHERITED_OBJC_LOADERS ${_TMP_MULLE_WEB_SERVER_FILE})
               break()
            endif()
         endforeach()
      endif()
   else()
      # Disable with: `mulle-sourcetree mark MulleWebServer no-require-link`
      message( FATAL_ERROR "MULLE_WEB_SERVER_LIBRARY was not found")
   endif()
endif()


#
# Generated from sourcetree: CE994F9D-CBD0-4CA9-BC81-96B12D0BBB69;MulleScion;no-singlephase;
# Disable with : `mulle-sourcetree mark MulleScion no-link`
# Disable for this platform: `mulle-sourcetree mark MulleScion no-cmake-platform-${MULLE_UNAME}`
# Disable for a sdk: `mulle-sourcetree mark MulleScion no-cmake-sdk-<name>`
#
if( NOT MULLE_SCION_LIBRARY)
   if( DEPENDENCY_IGNORE_SYSTEM_LIBARIES)
      find_library( MULLE_SCION_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleScion${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleScion${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleScion
         NO_CMAKE_SYSTEM_PATH NO_SYSTEM_ENVIRONMENT_PATH
      )
   else()
      find_library( MULLE_SCION_LIBRARY NAMES
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleScion${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
         ${CMAKE_STATIC_LIBRARY_PREFIX}MulleScion${CMAKE_STATIC_LIBRARY_SUFFIX}
         MulleScion
      )
   endif()
   message( STATUS "MULLE_SCION_LIBRARY is ${MULLE_SCION_LIBRARY}")
   #
   # The order looks ascending, but due to the way this file is read
   # it ends up being descending, which is what we need.
   #
   if( MULLE_SCION_LIBRARY)
      #
      # Add MULLE_SCION_LIBRARY to ALL_LOAD_DEPENDENCY_LIBRARIES list.
      # Disable with: `mulle-sourcetree mark MulleScion no-cmake-add`
      #
      list( APPEND ALL_LOAD_DEPENDENCY_LIBRARIES ${MULLE_SCION_LIBRARY})
      #
      # Inherit information from dependency.
      # Encompasses: no-cmake-searchpath,no-cmake-dependency,no-cmake-loader
      # Disable with: `mulle-sourcetree mark MulleScion no-cmake-inherit`
      #
      # temporarily expand CMAKE_MODULE_PATH
      get_filename_component( _TMP_MULLE_SCION_ROOT "${MULLE_SCION_LIBRARY}" DIRECTORY)
      get_filename_component( _TMP_MULLE_SCION_ROOT "${_TMP_MULLE_SCION_ROOT}" DIRECTORY)
      #
      #
      # Search for "Definitions.cmake" and "DependenciesAndLibraries.cmake" to include.
      # Disable with: `mulle-sourcetree mark MulleScion no-cmake-dependency`
      #
      foreach( _TMP_MULLE_SCION_NAME "MulleScion")
         set( _TMP_MULLE_SCION_DIR "${_TMP_MULLE_SCION_ROOT}/include/${_TMP_MULLE_SCION_NAME}/cmake")
         # use explicit path to avoid "surprises"
         if( IS_DIRECTORY "${_TMP_MULLE_SCION_DIR}")
            list( INSERT CMAKE_MODULE_PATH 0 "${_TMP_MULLE_SCION_DIR}")
            #
            include( "${_TMP_MULLE_SCION_DIR}/DependenciesAndLibraries.cmake" OPTIONAL)
            #
            list( REMOVE_ITEM CMAKE_MODULE_PATH "${_TMP_MULLE_SCION_DIR}")
            #
            unset( MULLE_SCION_DEFINITIONS)
            include( "${_TMP_MULLE_SCION_DIR}/Definitions.cmake" OPTIONAL)
            list( APPEND INHERITED_DEFINITIONS ${MULLE_SCION_DEFINITIONS})
            break()
         else()
            message( STATUS "${_TMP_MULLE_SCION_DIR} not found")
         endif()
      endforeach()
      #
      # Search for "MulleObjCLoader+<name>.h" in include directory.
      # Disable with: `mulle-sourcetree mark MulleScion no-cmake-loader`
      #
      if( NOT NO_INHERIT_OBJC_LOADERS)
         foreach( _TMP_MULLE_SCION_NAME "MulleScion")
            set( _TMP_MULLE_SCION_FILE "${_TMP_MULLE_SCION_ROOT}/include/${_TMP_MULLE_SCION_NAME}/MulleObjCLoader+${_TMP_MULLE_SCION_NAME}.h")
            if( EXISTS "${_TMP_MULLE_SCION_FILE}")
               list( APPEND INHERITED_OBJC_LOADERS ${_TMP_MULLE_SCION_FILE})
               break()
            endif()
         endforeach()
      endif()
   else()
      # Disable with: `mulle-sourcetree mark MulleScion no-require-link`
      message( FATAL_ERROR "MULLE_SCION_LIBRARY was not found")
   endif()
endif()
